export declare type ZoomVideoSdkSessionStatisticsInfoType = {
    audioStatisticsInfo?: () => Promise<ZoomVideoSdkSessionAudioStatisticsInfoType>;
    videoStatisticsInfo?: () => Promise<ZoomVideoSdkSessionVideoStatisticsInfoType>;
    shareStatisticsInfo?: () => Promise<ZoomVideoSdkSessionShareStatisticsInfoType>;
};
export declare type ZoomVideoSdkSessionAudioStatisticsInfoType = {
    audioRecvFrequency?: () => Promise<number>;
    audioRecvJitter?: () => Promise<number>;
    audioRecvLatency?: () => Promise<number>;
    audioRecvPacketLossAvg?: () => Promise<number>;
    audioRecvPacketLossMax?: () => Promise<number>;
    audioSendFrequency?: () => Promise<number>;
    audioSendJitter?: () => Promise<number>;
    audioSendLatency?: () => Promise<number>;
    audioSendPacketLossAvg?: () => Promise<number>;
    audioSendPacketLossMax?: () => Promise<number>;
};
export declare type ZoomVideoSdkSessionVideoStatisticsInfoType = {
    videoRecvFps?: () => Promise<number>;
    videoRecvFrameHeight?: () => Promise<number>;
    videoRecvFrameWidth?: () => Promise<number>;
    videoRecvJitter?: () => Promise<number>;
    videoRecvLatency?: () => Promise<number>;
    videoRecvPacketLossAvg?: () => Promise<number>;
    videoRecvPacketLossMax?: () => Promise<number>;
    videoSendFps?: () => Promise<number>;
    videoSendFrameHeight?: () => Promise<number>;
    videoSendFrameWidth?: () => Promise<number>;
    videoSendJitter?: () => Promise<number>;
    videoSendLatency?: () => Promise<number>;
    videoSendPacketLossAvg?: () => Promise<number>;
    videoSendPacketLossMax?: () => Promise<number>;
};
export declare type ZoomVideoSdkSessionShareStatisticsInfoType = {
    shareRecvFps?: () => Promise<number>;
    shareRecvFrameHeight?: () => Promise<number>;
    shareRecvFrameWidth?: () => Promise<number>;
    shareRecvJitter?: () => Promise<number>;
    shareRecvLatency?: () => Promise<number>;
    shareRecvPacketLossAvg?: () => Promise<number>;
    shareRecvPacketLossMax?: () => Promise<number>;
    shareSendFps?: () => Promise<number>;
    shareSendFrameHeight?: () => Promise<number>;
    shareSendFrameWidth?: () => Promise<number>;
    shareSendJitter?: () => Promise<number>;
    shareSendLatency?: () => Promise<number>;
    shareSendPacketLossAvg?: () => Promise<number>;
    shareSendPacketLossMax?: () => Promise<number>;
};
export declare class ZoomVideoSdkSessionStatisticsInfo implements ZoomVideoSdkSessionStatisticsInfoType, ZoomVideoSdkSessionAudioStatisticsInfoType, ZoomVideoSdkSessionVideoStatisticsInfoType, ZoomVideoSdkSessionShareStatisticsInfoType {
    private static instance;
    constructor();
    static getInstance(): ZoomVideoSdkSessionStatisticsInfo;
    audioStatisticsInfo(): Promise<any>;
    audioRecvFrequency(): Promise<any>;
    audioRecvJitter(): Promise<any>;
    audioRecvLatency(): Promise<any>;
    audioRecvPacketLossAvg(): Promise<any>;
    audioRecvPacketLossMax(): Promise<any>;
    audioSendFrequency(): Promise<any>;
    audioSendJitter(): Promise<any>;
    audioSendLatency(): Promise<any>;
    audioSendPacketLossAvg(): Promise<any>;
    audioSendPacketLossMax(): Promise<any>;
    videoStatisticsInfo(): Promise<any>;
    videoRecvFps(): Promise<any>;
    videoRecvFrameHeight(): Promise<any>;
    videoRecvFrameWidth(): Promise<any>;
    videoRecvJitter(): Promise<any>;
    videoRecvLatency(): Promise<any>;
    videoRecvPacketLossAvg(): Promise<any>;
    videoRecvPacketLossMax(): Promise<any>;
    videoSendFps(): Promise<any>;
    videoSendFrameHeight(): Promise<any>;
    videoSendFrameWidth(): Promise<any>;
    videoSendJitter(): Promise<any>;
    videoSendLatency(): Promise<any>;
    videoSendPacketLossAvg(): Promise<any>;
    videoSendPacketLossMax(): Promise<any>;
    shareStatisticsInfo(): Promise<any>;
    shareRecvFps(): Promise<any>;
    shareRecvFrameHeight(): Promise<any>;
    shareRecvFrameWidth(): Promise<any>;
    shareRecvJitter(): Promise<any>;
    shareRecvLatency(): Promise<any>;
    shareRecvPacketLossAvg(): Promise<any>;
    shareRecvPacketLossMax(): Promise<any>;
    shareSendFps(): Promise<any>;
    shareSendFrameHeight(): Promise<any>;
    shareSendFrameWidth(): Promise<any>;
    shareSendJitter(): Promise<any>;
    shareSendLatency(): Promise<any>;
    shareSendPacketLossAvg(): Promise<any>;
    shareSendPacketLossMax(): Promise<any>;
}
