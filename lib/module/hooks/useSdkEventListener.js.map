{"version":3,"names":["useCallback","NativeModules","NativeEventEmitter","EventType","eventEmitter","RNZoomVideoSdk","useSdkEventListener","addListener","event","handler"],"sources":["useSdkEventListener.ts"],"sourcesContent":["import { useCallback } from 'react';\nimport { NativeModules, NativeEventEmitter } from 'react-native';\n\nexport enum EventType {\n  onSessionJoin = 'onSessionJoin',\n  onSessionLeave = 'onSessionLeave',\n  onUserJoin = 'onUserJoin',\n  onUserLeave = 'onUserLeave',\n  onUserVideoStatusChanged = 'onUserVideoStatusChanged',\n  onUserAudioStatusChanged = 'onUserAudioStatusChanged',\n  onUserShareStatusChanged = 'onUserShareStatusChanged',\n  onLiveStreamStatusChanged = 'onLiveStreamStatusChanged',\n  onChatNewMessageNotify = 'onChatNewMessageNotify',\n  onUserNameChanged = 'onUserNameChanged',\n  onUserHostChanged = 'onUserHostChanged',\n  onUserManagerChanged = 'onUserManagerChanged',\n  onUserActiveAudioChanged = 'onUserActiveAudioChanged',\n  onSessionNeedPassword = 'onSessionNeedPassword',\n  onSessionPasswordWrong = 'onSessionPasswordWrong',\n  onError = 'onError',\n  onCommandReceived = 'onCommandReceived',\n  onCommandChannelConnectResult = 'onCommandChannelConnectResult',\n  onCloudRecordingStatus = 'onCloudRecordingStatus',\n  onHostAskUnmute = 'onHostAskUnmute',\n  onInviteByPhoneStatus = 'onInviteByPhoneStatus',\n  onChatDeleteMessageNotify = 'onChatDeleteMessageNotify',\n  onLiveTranscriptionStatus = 'onLiveTranscriptionStatus',\n  onLiveTranscriptionMsgReceived = 'onLiveTranscriptionMsgReceived',\n  onLiveTranscriptionMsgError = 'onLiveTranscriptionMsgError',\n  onLiveTranscriptionMsgInfoReceived = 'onLiveTranscriptionMsgInfoReceived',\n  onMultiCameraStreamStatusChanged = 'onMultiCameraStreamStatusChanged',\n  onRequireSystemPermission = 'onRequireSystemPermission',\n  onProxySettingNotification = 'onProxySettingNotification',\n  onSSLCertVerifiedFailNotification = 'onSSLCertVerifiedFailNotification',\n  onUserVideoNetworkStatusChanged = 'onUserVideoNetworkStatusChanged',\n  onCameraControlRequestResult = 'onCameraControlRequestResult',\n  onUserRecordingConsent = 'onUserRecordingConsent',\n  onCallCRCDeviceStatusChanged = 'onCallCRCDeviceStatusChanged',\n}\n\nconst eventEmitter = new NativeEventEmitter(NativeModules.RNZoomVideoSdk);\n\nexport function useSdkEventListener() {\n  const addListener = useCallback(\n    (event: EventType, handler: (data?: any) => void) => {\n      return eventEmitter.addListener(event, handler);\n    },\n    []\n  );\n\n  return { addListener };\n}\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,SAASC,aAAa,EAAEC,kBAAkB,QAAQ,cAAc;AAEhE,WAAYC,SAAS,0BAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAAA,OAATA,SAAS;AAAA;AAqCrB,MAAMC,YAAY,GAAG,IAAIF,kBAAkB,CAACD,aAAa,CAACI,cAAc,CAAC;AAEzE,OAAO,SAASC,mBAAmBA,CAAA,EAAG;EACpC,MAAMC,WAAW,GAAGP,WAAW,CAC7B,CAACQ,KAAgB,EAAEC,OAA6B,KAAK;IACnD,OAAOL,YAAY,CAACG,WAAW,CAACC,KAAK,EAAEC,OAAO,CAAC;EACjD,CAAC,EACD,EACF,CAAC;EAED,OAAO;IAAEF;EAAY,CAAC;AACxB"}